{"version":3,"file":"simple-react-form-hook.cjs.production.min.js","sources":["../src/hooks/useForm.ts","../src/hooks/useRegister.ts","../src/utils/validate.ts"],"sourcesContent":["import { ChangeEvent, FormEvent, useState } from \"react\";\r\nimport useRegister from \"./useRegister\";\r\nimport validate from \"../utils/validate\";\r\n\r\nexport type FormErrors<T> = {\r\n  [key in keyof T]?: string;\r\n};\r\n\r\ntype ValidationFunction<T> = {\r\n  required?: boolean;\r\n  message?: string;\r\n  validate?: (value: T) => {\r\n    requirement: boolean;\r\n    message: string;\r\n  };\r\n};\r\n\r\nexport type Validations<T> = {\r\n  [key in keyof T]?: ValidationFunction<T[key]>;\r\n};\r\n\r\ninterface UseFormProps<T> {\r\n  defaultValue?: T;\r\n  validations?: Validations<T>;\r\n}\r\n\r\ntype DataType = string | number | boolean | null | undefined | object;\r\n\r\nconst useForm = <T extends Record<string, DataType>>(\r\n  props?: UseFormProps<T>\r\n) => {\r\n  const [formData, setFormData] = useState<T>((props?.defaultValue as T) || {});\r\n  const [errors, setErrors] = useState<FormErrors<T>>({});\r\n  const [isSubmitted, setIsSubmitted] = useState<boolean>(false);\r\n\r\n  const ref = useRegister(props?.defaultValue, setFormData);\r\n\r\n  const handleValidate = (data: T, call?: CallableFunction) =>\r\n    validate<T>(data, props?.validations)\r\n      .then((res) => {\r\n        setErrors(res.errors as FormErrors<T>);\r\n        if (call) {\r\n          call();\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setErrors(e.errors as FormErrors<T>);\r\n      });\r\n\r\n  const handleChange = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>\r\n  ) => {\r\n    e.persist();\r\n    const { name, value } = e.target;\r\n    const newData = { ...formData, [name]: value };\r\n    if (isSubmitted) {\r\n      handleValidate(newData);\r\n    }\r\n    setFormData(newData);\r\n  };\r\n\r\n  const handleSubmit = (\r\n    onSubmit: (data: T) => void\r\n  ): ((e: FormEvent) => void) => {\r\n    return (e) => {\r\n      e.preventDefault();\r\n      setIsSubmitted(true);\r\n      handleValidate(formData, () => {\r\n        onSubmit(formData);\r\n      });\r\n    };\r\n  };\r\n\r\n  return {\r\n    ref,\r\n    errors,\r\n    handleChange,\r\n    handleSubmit,\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst useRegister = (\r\n  formData: any,\r\n  setFormData: React.Dispatch<React.SetStateAction<any>>\r\n) => {\r\n  const ref = useRef<HTMLFormElement>(null);\r\n\r\n  useEffect(() => {\r\n    const formInputs: any = {};\r\n\r\n    const setDefaultValues = () => {\r\n      if (ref.current && ref.current.elements) {\r\n        Array.from(ref.current.elements).forEach((el) => {\r\n          const element = el as HTMLInputElement;\r\n          if (ref.current && ref.current[element.name]) {\r\n            ref.current[element.name].value = formData[element.name];\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    const setInitialValues = () => {\r\n      if (ref.current && ref.current.elements) {\r\n        Array.from(ref.current.elements).forEach((element) => {\r\n          switch (element.nodeName) {\r\n            case \"INPUT\": {\r\n              const el = element as HTMLInputElement;\r\n              if (!formData?.[el?.name]) {\r\n                formInputs[el?.name] = undefined;\r\n              }\r\n              break;\r\n            }\r\n            case \"SELECT\": {\r\n              const el = element as HTMLSelectElement;\r\n              if (!formData?.[el?.name]) {\r\n                formInputs[el?.name] = undefined;\r\n              }\r\n              break;\r\n            }\r\n            default:\r\n              break;\r\n          }\r\n        });\r\n      }\r\n      setFormData((th: any) => ({ ...th, ...formInputs }));\r\n    };\r\n\r\n    if (formData) {\r\n      setDefaultValues();\r\n    } else {\r\n      setInitialValues();\r\n    }\r\n  }, []);\r\n\r\n  return ref;\r\n};\r\n\r\nexport default useRegister;\r\n","import { FormErrors, Validations } from \"../hooks/useForm\";\r\n\r\nfunction validate<T>(\r\n  inputs: T,\r\n  validations?: Validations<T>\r\n): Promise<{ status: boolean; errors: FormErrors<T> }> {\r\n  return new Promise((res, rej) => {\r\n    let errors: FormErrors<T> = {};\r\n    if (validations) {\r\n      Object.keys(validations).forEach((validate) => {\r\n        const fieldName = validate as keyof T;\r\n        const value = inputs[fieldName];\r\n        const validationCriteria = validations[fieldName];\r\n        if (validationCriteria) {\r\n          if (validationCriteria?.required && !value) {\r\n            Object.assign(errors, {\r\n              [fieldName]: validationCriteria?.message || \"\",\r\n            });\r\n          } else if (validationCriteria?.validate) {\r\n            const isValid = validationCriteria.validate(inputs[fieldName]);\r\n            if (!isValid.requirement) {\r\n              Object.assign(errors, {\r\n                [fieldName]: isValid.message,\r\n              });\r\n            }\r\n          } else {\r\n            if (errors[fieldName]) {\r\n              delete errors[fieldName];\r\n            }\r\n          }\r\n        }\r\n      });\r\n      Object.keys(errors).length > 0\r\n        ? rej({ status: false, errors })\r\n        : res({ status: true, errors });\r\n    } else {\r\n      res({ status: true, errors });\r\n    }\r\n  });\r\n}\r\n\r\nexport default validate;\r\n"],"names":["props","formData","setFormData","useState","defaultValue","errors","setErrors","isSubmitted","setIsSubmitted","ref","useRegister","useRef","useEffect","formInputs","current","elements","Array","from","forEach","el","name","value","element","nodeName","undefined","th","handleValidate","data","call","validate","inputs","validations","Promise","res","rej","Object","keys","fieldName","validationCriteria","required","assign","[object Object]","message","isValid","requirement","length","status","then","catch","e","handleChange","persist","target","newData","handleSubmit","onSubmit","preventDefault"],"mappings":"2GA6BEA,IAEA,MAAOC,EAAUC,GAAeC,kBAAaH,SAAAA,EAAOI,eAAsB,KACnEC,EAAQC,GAAaH,WAAwB,KAC7CI,EAAaC,GAAkBL,YAAkB,GAElDM,ECjCYC,EAClBT,EACAC,KAEA,MAAMO,EAAME,SAAwB,MAiDpC,OA/CAC,YAAU,KACR,MAAMC,EAAkB,GAuCpBZ,EApCEQ,EAAIK,SAAWL,EAAIK,QAAQC,UAC7BC,MAAMC,KAAKR,EAAIK,QAAQC,UAAUG,QAASC,IAEpCV,EAAIK,SAAWL,EAAIK,QADPK,EACuBC,QACrCX,EAAIK,QAFUK,EAEMC,MAAMC,MAAQpB,EAFpBkB,EAEqCC,UAOrDX,EAAIK,SAAWL,EAAIK,QAAQC,UAC7BC,MAAMC,KAAKR,EAAIK,QAAQC,UAAUG,QAASI,IACxC,OAAQA,EAAQC,UACd,IAAK,QAAS,CACZ,MAAMJ,EAAKG,QACNrB,GAAAA,QAAWkB,SAAAA,EAAIC,QAClBP,QAAWM,SAAAA,EAAIC,WAAQI,GAEzB,MAEF,IAAK,SAAU,CACb,MAAML,EAAKG,QACNrB,GAAAA,QAAWkB,SAAAA,EAAIC,QAClBP,QAAWM,SAAAA,EAAIC,WAAQI,GAEzB,UAORtB,EAAauB,QAAkBA,KAAOZ,OAQvC,IAEIJ,GDpBKC,OAAYV,SAAAA,EAAOI,aAAcF,GAEvCwB,EAAiBA,CAACC,EAASC,KAC/BC,OEnCFC,EFmCcH,EElCdI,QFkCoB/B,SAAAA,EAAO+B,YEhCpB,IAAIC,QAAQ,CAACC,EAAKC,KACvB,IAAI7B,EAAwB,GACxB0B,GACFI,OAAOC,KAAKL,GAAab,QAASW,IAChC,MAAMQ,EAAYR,EAEZS,EAAqBP,EAAYM,GACvC,GAAIC,EACF,SAAIA,GAAAA,EAAoBC,WAHZT,EAAOO,GAIjBF,OAAOK,OAAOnC,EAAQ,CACpBoC,CAACJ,UAAYC,SAAAA,EAAoBI,UAAW,UAEzC,SAAIJ,GAAAA,EAAoBT,SAAU,CACvC,MAAMc,EAAUL,EAAmBT,SAASC,EAAOO,IAC9CM,EAAQC,aACXT,OAAOK,OAAOnC,EAAQ,CACpBoC,CAACJ,GAAYM,EAAQD,eAIrBrC,EAAOgC,WACFhC,EAAOgC,KAKtBF,OAAOC,KAAK/B,GAAQwC,OAAS,EACzBX,EAAI,CAAEY,QAAQ,EAAOzC,OAAAA,IACrB4B,EAAI,CAAEa,QAAQ,EAAMzC,OAAAA,KAExB4B,EAAI,CAAEa,QAAQ,EAAMzC,OAAAA,OFGnB0C,KAAMd,IACL3B,EAAU2B,EAAI5B,QACVuB,GACFA,MAGHoB,MAAOC,IACN3C,EAAU2C,EAAE5C,UE5CpB,IACEyB,EACAC,GFqEA,MAAO,CACLtB,IAAAA,EACAJ,OAAAA,EACA6C,aA1BAD,IAEAA,EAAEE,UACF,MAAM/B,KAAEA,EAAIC,MAAEA,GAAU4B,EAAEG,OACpBC,EAAU,IAAKpD,EAAUwC,CAACrB,GAAOC,GACnCd,GACFmB,EAAe2B,GAEjBnD,EAAYmD,IAmBZC,aAfAC,GAEQN,IACNA,EAAEO,iBACFhD,GAAe,GACfkB,EAAezB,EAAU,KACvBsD,EAAStD"}